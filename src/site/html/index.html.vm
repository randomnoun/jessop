<!-- 

  This file will be preprocessed by the Velocity template engine, which should replace
  the project.groupId strings below.
  
  The rest of this file is in some kind of bastardised crippled HTML + velocity.
  
  It's this kind of fscking awful templating system that drove me into writing this 
  project in the first place.
  
  https://search.maven.org/artifact/com.randomnoun.common/jessop/1.0.8/jar
  https://search.maven.org/remotecontent?filepath=com/randomnoun/common/jessop/1.0.8/jessop-1.0.8.jar
  https://repo1.maven.org/maven2/com/randomnoun/common/1.0.9-SNAPSHOT/jessop-1.0.9-SNAPSHOT.jar
  
-->
#set( $repos = "https://repo1.maven.org/maven2/" )
#set( $jarBasename = ${project.artifactId} + "-" + ${project.version} + ".jar" )
#set( $srcBasename = ${project.artifactId} + "-" + ${project.version} + "-sources.jar" )
#set( $distBasename = ${project.artifactId} + "-" + ${project.version} + "-dist.zip" )
#set( $groupIdPath = ${project.groupId} )
#set( $groupIdPath = $groupIdPath.replace(".", "/") )
#set( $jarUrl = $repos + $groupIdPath + "/" + ${project.version} + "/" + $jarBasename )
#set( $srcUrl = $repos + $groupIdPath + "/" + ${project.version} + "/" + $srcBasename )
#set( $distUrl = $repos + $groupIdPath + "/" + ${project.version} + "/" + $distBasename )

<h2>Overview</h2>

<p><b>Jessop</b> is a polyglot templating language in the style of Java Server Pages (JSPs).</p>

<p>Like all templating languages, the output can be any text stream ( e.g. English text, HTML/CSS or 
if generating boilerplate, other programming code),
but the statements, conditions and expressions within the language can be 
written in any language that the Java scripting engine ( javax.script ) supports.

<p><i>e.g.</i> by enabling the '<b>javascript</b>' target language, you can embed javascript code within your
jessop script (which executes using the 'rhino' engine), or by enabling the '<b>python</b>' target 
language, you can embed python code within your jessop script (which executes using the
'jython' engine).

<p>The jessop syntax should be familiar to anyone who has written JSPs. A file may contain
<!-- 
  the doxia sink API doesn't support 'code' html tags, you can't put attributes on 'tt' tags,
  and it automatically puts 'div's around inline-blocked 'pre' elements. christ. 
  i hereby renew my pledge to find out who designed this, where they live, and then set fire to their loved ones.
  -->
<ul>
<li>a <b>declaration</b> in the form <p class="inline-code">&lt;%@ jessop language="javascript" engine="rhino" %&gt;</p>
<li><b>expressions</b> to generate output in the form <p class="inline-code">&lt;%= name %&gt;</p> 
<li><b>scriptlets</b> to execute arbitrary code in the form <p class="inline-code">&lt;% if (name==null) { %&gt;</p><p class="inline"> No name </p><p class="inline-code">&lt;% } %&gt;</p>
</ul> 

<p>See the <a href="apidocs/index.html">Javadoc overview</a> for a more complete description of the 
<b>jessop</b> syntax.

<h2>Example input/output</h2>

<hr/>

<h3>Javascript</h3>

<pre>
&lt;%@ jessop language=&quot;javascript&quot; engine=&quot;rhino&quot; %&gt;
Hello, &lt;%= name %&gt;
&lt;% for (var i = 1; i &lt; maxCount; i++) { %&gt;
&lt;%= i %&gt;
&lt;% } %&gt;
</pre>

<h3>Output</h3>

<pre>
Hello, Count von Count

1

2

3
</pre>

<h3>Java</h3>

<pre>
&lt;%@ jessop language=&quot;java&quot; engine=&quot;beanshell&quot; %&gt;
Hello, &lt;%= name %&gt;
&lt;% for (int i=1; i &lt; maxCount; i++) { %&gt;
&lt;%= i %&gt;
&lt;% } %&gt;
</pre>

<h3>Output</h3>

<pre>
Hello, Count von Count

1

2

3
</pre>

</h3>

<h3>Ruby</h3>

<pre>
&lt;%@ jessop language=&quot;ruby&quot; engine=&quot;jruby&quot; %&gt;
Hello, &lt;%= $name %&gt;
&lt;% (1..$maxCount).each do |i| %&gt;
&lt;%= i %&gt;
&lt;% end %&gt;
</pre>

<h3>Output</h3>

<pre>
Hello, Count von Count

1

2

3
</pre>

<h3>Python</h3>

<pre>
&lt;%@ jessop language=&quot;python2&quot; engine=&quot;jython&quot; %&gt;
Hello, &lt;%= name %&gt;
&lt;%
for i in range(1, maxCount):
%&gt;
&lt;%= i %&gt;
&lt;%
pass;
%&gt;
</pre>

<h3>Output</h3>

<pre>
Hello, Count von Count

1

2

3
</pre>

<h3>Lua</h3>

<pre>
&lt;%@ jessop language=&quot;lua&quot; engine=&quot;luaj&quot; %&gt;
Hello, &lt;%= name %&gt;
&lt;% for i = 1, maxCount - 1 do %&gt;
&lt;%= i %&gt;
&lt;% end %&gt;
</pre>

<h3>Output</h3>

<pre>
Hello, Count von Count

1

2

3
</pre>

<h3>Lisp</h3>

<pre>
&lt;%@ jessop language=&quot;lisp&quot; engine=&quot;ABCL&quot; %&gt;
Hello, &lt;%= name %&gt;
&lt;% (loop for i from 1 to maxCount do %&gt;
&lt;%= i %&gt;
&lt;% ) %&gt;
</pre>

<h3>Output</h3>

<pre>
Hello, Count von Count

1

2

3
</pre>


<h2></h2><!-- to move back to lhs column -->

<p>See the <a href="apidocs/index.html">Javadoc overview</a> for more example programs.  

<p>The <a href="xref-test/index.html">unit tests</a> accompanying this project include further examples. 

<hr/>

<h2>Example Java code</h2>

<p>The following Java code will read an input file and evaluate it using the 'jessop' ScriptEngine.</p>

<p>See the <a href="apidocs/index.html">Javadoc overview</a> for more example programs.

<pre>
package com.example.contrived.jessop;

import java.io.File;
import java.io.FileNotFoundException;

import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.script.ScriptException;

import java.util.Scanner;

public class JessopExample {

    public void main(String args[]) throws FileNotFoundException, ScriptException {

        // read the input file
        String filename = args[1];
        String input = new Scanner(new File(filename)).useDelimiter("\\Z").next();
        
        // initialise the jessop ScriptEngine
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("jessop");
        if (engine==null) { throw new IllegalStateException("Missing engine 'jessop'"); }
        
        // set some variables which are used in the jessop script
        Bindings b = engine.createBindings();
        b.put("name", "Count von Count");
        b.put("maxCount", 4);
        
        // evaluate the script
        engine.eval(input);
    }

}
</pre>

<hr/>

<h2>Usage</h2>

<p>To use this Maven project, include it in your <a href="http://maven.apache.org/pom.html">project model</a>

<pre>
&lt;project&gt;
  ...
  &lt;dependencies&gt;
    ...
    &lt;dependency&gt;
      &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
      &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt;
      &lt;version&gt;${project.version}&lt;/version&gt;
    &lt;/dependency&gt;
    ...    
  &lt;/dependencies&gt;
  ...
&lt;/project&gt;
</pre>

<h2>Download</h2>

<p>If you're not using maven, you can download the binary and source JARs using these links:</p>

<!-- 
  Using P element's here because doxia doesn't work well with DIVs. 
  Can't nest P elements, unfortunately, hence the weird sup/sub element formatting here. 
-->
<table>
<tr><td>
<p class="download-button"><a href="${jarUrl}"><img width="41" height="40" style="margin: 5px; float:left;" src="images/download-arrow.png"></img></a>
<sup class="big"><a href="${jarUrl}">Download compiled JAR</a></sup>
<sub class="small"><a href="${jarUrl}">${jarBasename}</a></sub>
</p>
<td>To compile or run, add this JAR to your CLASSPATH.

<tr><td>
<p class="download-button"><a href="${srcUrl}"><img width="41" height="40" style="margin: 5px; float:left;" src="images/download-arrow.png"></img></a>
<sup class="big"><a href="${srcUrl}">Download source JAR</a></sup>
<sub class="small"><a href="${srcUrl}">${srcBasename}</a></sub>
</p>
<td>To debug in an IDE, set this JAR as the Java Source attachment for ${jarBasename}

<tr><td>
<p class="download-button"><a href="${distUrl}"><img width="41" height="40" style="margin: 5px; float:left;" src="images/download-arrow.png"></img></a>
<sup class="big"><a href="${distUrl}">Download distribution ZIP</a></sup>
<sub class="small"><a href="${distUrl}">${distBasename}</a></sub>
</p>
<td>To build jessop from source, unpackage this archive and run <tt>mvn compile</tt>
</table>

<p>Artifacts are contained within the <a href="https://search.maven.org/">maven central repository</a>

<hr/>

<h2>Target languages</h2>

<p>Jessop has initial support for five target languages (using five script engines).</p> 

<p>You will need to add the appropriate maven dependency to target these languages and engines.</p>

<table>
<tr><th>Language<th>Engine<th>Engine groupId<th>Engine artifactId<th>Artifact version
<tr><td>javascript <td>rhino / nashorn <td colspan="3"><i>(Bundled with JVM)</i>
<tr><td>java       <td>beanshell <td>org.beanshell <td>bsh        <td>2.0b5
<tr><td>python     <td>jython    <td>org.python    <td>jython     <td>2.5.3
<tr><td>ruby       <td>jruby     <td>org.jruby     <td>jruby-complete <td>9.1.2.0
<tr><td>lua        <td>luaj      <td>org.luaj      <td>luaj-jse   <td>3.0.1
<tr><td>lisp       <td>abcl      <td>org.abcl      <td>abcl       <td>1.4.0
</table>
 
<p>Additional languages and engines can be added by implementing the 
<a href="apidocs/com/randomnoun/common/jessop/JessopScriptBuilder.html">JessopScriptBuilder</a>
interface, registered using the standared Java 
<a href="https://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html">ServiceLoader</a> 
mechanism.

<h2>Syntax</h2>
<p>See the <a href="apidocs/index.html">Javadoc overview</a> for a description of the 
<b>jessop</b> syntax.

<h2>License</h2>
<b>jessop</b> is licensed under the <a href="license.html">Simplified BSD 2-clause license</a>.

<!--
Kind of hoping that this works
-->
