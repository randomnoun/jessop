package com.randomnoun.common.jessop;

import java.io.PrintWriter;

import javax.script.ScriptException;

/** Each language we intend to support within jessop must have an implementation of this interface. 
 * Developers wishing to implement this interface should use the AbstractJessopScriptBuilder abstract class.
 * 
 * <p>Implementations of this class should return the language it supports (and the default script engine name) via the
 * {@link #getLanguage()} and {@link #getDefaultScriptEngineName()} methods.
 * 
 * <p>These values will be used to select the correct JessopScriptBuilder identified in the jessop source file declaration.
 * 
 * <p>When this class is instantiated, the caller will invoke {@link #setPrintWriter()} and {@link #setTokeniser()}.
 * 
 * <p>As the Tokeniser parse the jessop source file, it will invoke emit() methods on this class.
 * As these methods are called, this class should generate code via the printWriter in the output (language-specific) script.
 * 
 * <p>Care should be taken to ensure that code in the output script is on the same line number
 * as the corresponding code on the input script, to make error messages easier to handle.
 * 
 * @author knoxg
 * @version $Id$
 */
interface JessopScriptBuilder {
	// lines are source line numbers; try to keep these intact in the generated script
	String getLanguage();                                            // language that this scriptBuilder can parse; e.g. "python2"
	String getDefaultScriptEngineName();                             // the default ScriptEngine to use to process scripts generated by this class; e.g. "rhino"
	
	void setPrintWriter(PrintWriter pw); 							 // the printWriter that this class will write to during emit() methods
	void setTokeniser(Tokeniser t, JessopDeclarations declarations); // set at the start of script parsing; allows this ScriptBuilder to switch ScriptBuilders
	
	void emitText(int line, String s);        // ...
	void emitExpression(int line, String s);  // <%= ... %>
	void emitScriptlet(int line, String s);   // <% ... %> . JSP calls these things scriptlets
	void emitDeclaration(int line, String s) throws ScriptException; // <%@ ... %>. ideally, there's only one of these, at the top of the source script 
	
	JessopDeclarations getDeclarations();                            // to retrieve declarations after the script is built
}