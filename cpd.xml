<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="196" tokens="1037">
<file line="31" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhino\ScriptableMap.java"/>
<file line="32" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhinoOpenjdk\ScriptableMap.java"/>
<file line="32" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhinoOracle\ScriptableMap.java"/>
<codefragment>
<![CDATA[
public class ScriptableMap extends NativeJavaObject {

    boolean reflect;
    Map map;
    final static String CLASSNAME = "ScriptableMap";

    // Set up a custom constructor, for this class is somewhere between a host class and
    // a native wrapper, for which no standard constructor class exists
    public static void init(Scriptable scope) throws NoSuchMethodException {
        BaseFunction ctor = new BaseFunction(scope, ScriptableObject.getFunctionPrototype(scope)) {
            @Override
            public Scriptable construct(Context cx, Scriptable scope, Object[] args) {
                boolean reflect = false;
                if (args.length > 2) {
                    throw new EvaluatorException("ScriptableMap() called with too many arguments");
                } if (args.length == 2) {
                    reflect = ScriptRuntime.toBoolean(args[1]);
                }
                return new ScriptableMap(scope, args.length == 0 ? null : args[0], reflect);
            }
            @Override
            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
                return construct(cx, scope, args);
            }
        };
        ScriptableObject.defineProperty(scope, CLASSNAME, ctor,
                ScriptableObject.DONTENUM | ScriptableObject.READONLY);
    }

    @SuppressWarnings("unchecked")
    private ScriptableMap(Scriptable scope, Object obj, boolean reflect) {
        this.parent = scope;
        this.reflect = reflect;
        if (obj instanceof Wrapper) {
            obj = ((Wrapper) obj).unwrap();
        }
        if (obj instanceof Map) {
            this.map = (Map) obj;
        } else if (obj == null || obj == Undefined.instance) {
            this.map = new HashMap();
        } else if (obj instanceof Scriptable) {
            this.map = new HashMap();
            Scriptable s = (Scriptable) obj;
            Object[] ids = s.getIds();
            for (Object id: ids) {
                if (id instanceof String) {
                    map.put(id, s.get((String)id, s));
                } else if (id instanceof Number) {
                    map.put(id, s.get(((Number)id).intValue(), s));
                }
            }
        } else {
            throw new EvaluatorException("Invalid argument to ScriptableMap(): " + obj);
        }
        this.javaObject = this.map;
        this.staticType = this.map.getClass();
        initMembers();
        initPrototype(scope);

    }

    public ScriptableMap(Scriptable scope, Map map) {
        super(scope, map, map.getClass());
        this.map = map;
        initPrototype(scope);
    }

    /**
     * Set the prototype to the Object prototype so we can use object methods such as
     * getOwnPropertyNames, hasOwnProperty, keys etc.
     * @param scope the global scope for looking up the Object constructor
     */
    protected void initPrototype(Scriptable scope) {
        Scriptable objectProto = ScriptableObject.getClassPrototype(scope, "Object");
        if (objectProto != null) {
            this.setPrototype(objectProto);
        }
    }

    public Object get(String name, Scriptable start) {
        if (map == null || (reflect && super.has(name, start))) {
            return super.get(name, start);
        }
        return getInternal(name);
    }

    public Object get(int index, Scriptable start) {
        if (map == null) {
            return super.get(index, start);
        }
        return getInternal(new Integer(index));
    }

    private Object getInternal(Object key) {
        Object value = map.get(key);
        if (value == null) {
            return Scriptable.NOT_FOUND;
        }
        return ScriptUtils.javaToJS(value, getParentScope());
    }

    public boolean has(String name, Scriptable start) {
        if (map == null || (reflect && super.has(name, start))) {
            return super.has(name, start);
        } else {
            return map.containsKey(name);
        }
    }

    public boolean has(int index, Scriptable start) {
        if (map == null) {
            return super.has(index, start);
        } else {
            return map.containsKey(new Integer(index));
        }
    }

    public void put(String name, Scriptable start, Object value) {
        if (map == null || (reflect && super.has(name, start))) {
            super.put(name, start, value);
        } else {
            putInternal(name, value);
        }
    }

    public void put(int index, Scriptable start, Object value) {
        if (map == null) {
             super.put(index, start, value);
         } else {
             putInternal(new Integer(index), value);
        }
    }

    @SuppressWarnings("unchecked")
    private void putInternal(Object key, Object value) {
        try {
            map.put(key, ScriptUtils.jsToJava(value));
        } catch (RuntimeException e) {
            Context.throwAsScriptRuntimeEx(e);
        }
    }

    public void delete(String name) {
        if (map != null) {
            try {
                map.remove(name);
            } catch (RuntimeException e) {
                Context.throwAsScriptRuntimeEx(e);
            }
        } else {
            super.delete(name);
        }
    }

    public void delete(int index) {
        if (map != null) {
            try {
                map.remove(new Integer(index));
            } catch (RuntimeException e) {
                Context.throwAsScriptRuntimeEx(e);
            }
        } else {
            super.delete(index);
        }
    }

    public Object[] getIds() {
        if (map == null) {
            return super.getIds();
        } else {
            return map.keySet().toArray();
        }
    }

    public String toString() {
        if (map == null)
            return super.toString();
        return map.toString();
    }

    public Object getDefaultValue(Class typeHint) {
        return toString();
    }

    public Object unwrap() {
        return map;
    }

    public Map getMap() {
        return map;
    }

    public String getClassName() {
        return CLASSNAME;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="189" tokens="1003">
<file line="33" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhino\ScriptableList.java"/>
<file line="35" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhinoOpenjdk\ScriptableList.java"/>
<file line="35" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhinoOracle\ScriptableList.java"/>
<codefragment>
<![CDATA[
public class ScriptableList extends NativeJavaObject {

    List<Object> list;
    static final String CLASSNAME = "ScriptableList";

    // Set up a custom constructor, for this class is somewhere between a host class and
    // a native wrapper, for which no standard constructor class exists
    public static void init(Scriptable scope) throws NoSuchMethodException {
        BaseFunction ctor = new BaseFunction(scope, ScriptableObject.getFunctionPrototype(scope)) {
            @Override
            public Scriptable construct(Context cx, Scriptable scope, Object[] args) {
                if (args.length > 1) {
                    throw new EvaluatorException("ScriptableList() requires a java.util.List argument");
                }
                return new ScriptableList(scope, args.length == 0 ? null : args[0]);
            }
            @Override
            public Object call(Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
                return construct(cx, scope, args);
            }
        };
        ScriptableObject.defineProperty(scope, CLASSNAME, ctor,
                ScriptableObject.DONTENUM | ScriptableObject.READONLY);
    }

    /**
     * Create a ScriptableList wrapper around a java.util.List
     * @param scope the scope
     * @param obj the list, possibly wrapped
     */
    @SuppressWarnings("unchecked")
    private ScriptableList(Scriptable scope, Object obj) {
        this.parent = scope;
        if (obj instanceof Wrapper) {
            obj = ((Wrapper) obj).unwrap();
        }
        if (obj instanceof List) {
            this.javaObject = this.list = (List) obj;
        } else if (obj instanceof Collection) {
            this.javaObject = this.list = new ArrayList<Object>((Collection<?>) obj);
        } else if (obj instanceof Map) {
            this.javaObject = this.list = new ArrayList<Object>(((Map<?,?>)obj).values());
        } else if (obj == null || obj == Undefined.instance) {
            this.javaObject = this.list = new ArrayList<Object>();
        } else {
            throw new EvaluatorException("Invalid argument to ScriptableList(): " + obj);
        }
        this.staticType = this.list.getClass();
        initMembers();
        initPrototype(scope);
    }


    /**
     * Create a ScriptableList wrapper around a java.util.List.
     * @param scope the scope
     * @param list the list instance
     */
    @SuppressWarnings("unchecked")
    public ScriptableList(Scriptable scope, List list) {
        super(scope, list, list.getClass());
        this.list = list;
        initPrototype(scope);
    }

    /**
     * Set the prototype to the Array prototype so we can use array methds such as
     * push, pop, shift, slice etc.
     * @param scope the global scope for looking up the Array constructor
     */
    protected void initPrototype(Scriptable scope) {
        Scriptable arrayProto = ScriptableObject.getClassPrototype(scope, "Array");
        if (arrayProto != null) {
            this.setPrototype(arrayProto);
        }
    }

    public void delete(int index) {
        if (list != null) {
            try {
                list.remove(index);
            } catch (RuntimeException e) {
                throw Context.throwAsScriptRuntimeEx(e);
            }
        } else {
            super.delete(index);
        }
    }

    public Object get(int index, Scriptable start) {
        if (list == null)
            return super.get(index, start);
        try {
            if (index < 0 || index >= list.size()) {
                return Undefined.instance;
            } else {
                return ScriptUtils.javaToJS(list.get(index), getParentScope());
            }
        } catch (RuntimeException e) {
            throw Context.throwAsScriptRuntimeEx(e);
        }
    }

    public boolean has(int index, Scriptable start) {
        if (list == null)
            return super.has(index, start);
        return index >= 0 && index < list.size();
    }

    public void put(String name, Scriptable start, Object value) {
        if (list != null && "length".equals(name)) {
            double d = ScriptRuntime.toNumber(value);
            long longVal = ScriptRuntime.toUint32(d);
            if (longVal != d) {
                String msg = ScriptRuntime.getMessage0("msg.arraylength.bad");
                throw ScriptRuntime.constructError("RangeError", msg);
            }
            int size = list.size();
            if (longVal > size) {
                for (int i = size; i < longVal; i++) {
                    // push nulls as undefined is probably meaningless to java code
                    list.add(null);
                }
            } else if (longVal < size) {
                for (int i = size - 1; i >= longVal; i--) {
                    list.remove(i);
                }
            }
        } else {
            super.put(name, start, value);
        }
    }

    public void put(int index, Scriptable start, Object value) {
        if (list != null) {
            try {
                if (index == list.size()) {
                    list.add(ScriptUtils.jsToJava(value));
                } else {
                    list.set(index, ScriptUtils.jsToJava(value));
                }
            } catch (RuntimeException e) {
                Context.throwAsScriptRuntimeEx(e);
            }
        } else {
            super.put(index, start, value);
        }
    }

    public Object get(String name, Scriptable start) {
        if ("length".equals(name) && list != null) {
            return new Integer(list.size());
        }
        return super.get(name, start);
    }

    public Object[] getIds() {
        if (list == null)
            return super.getIds();
        int size = list.size();
        Object[] ids = new Object[size];
        for (int i = 0; i < size; ++i) {
            ids[i] = new Integer(i);
        }
        return ids;
    }

    public String toString() {
        if (list == null)
            return super.toString();
        return list.toString();
    }

    public Object getDefaultValue(Class typeHint) {
        return toString();
    }

    public Object unwrap() {
        return list;
    }

    public List getList() {
        return list;
    }

    public String getClassName() {
        return CLASSNAME;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="196" tokens="912">
<file line="33" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhino\ScriptUtils.java"/>
<file line="34" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhinoOpenjdk\ScriptUtils.java"/>
<file line="34" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\engine\rhinoOracle\ScriptUtils.java"/>
<codefragment>
<![CDATA[
public class ScriptUtils {

    /**
     * Coerce/wrap a java object to a JS object, and mask Lists and Maps
     * as native JS objects.
     * @param obj the object to coerce/wrap
     * @param scope the scope
     * @return the wrapped/masked java object
     */
    @SuppressWarnings("unchecked")
    public static Object javaToJS(Object obj, Scriptable scope) {
        if (obj instanceof Scriptable) {
            if (obj instanceof ScriptableObject
                    && ((Scriptable) obj).getParentScope() == null
                    && ((Scriptable) obj).getPrototype() == null) {
                ScriptRuntime.setObjectProtoAndParent((ScriptableObject) obj, scope);
            }
            return obj;
        } else if (obj instanceof List) {
            return new ScriptableList(scope, (List) obj);
        } else if (obj instanceof Map) {
            return new ScriptableMap(scope, (Map) obj);
        } else {
            return Context.javaToJS(obj, scope);
        }
    }

    /**
     * Unwrap a JS object to a java object. This is much more conservative than
     * Context.jsToJava in that it will preserve undefined values.
     * @param obj a JavaScript value
     * @return a Java object corresponding to obj
     */
    public static Object jsToJava(Object obj) {
        while (obj instanceof Wrapper) {
            obj = ((Wrapper) obj).unwrap();
        }
        return obj;
    }

    /**
     * Return a class prototype, or the object prototype if the class
     * is not defined.
     * @param scope the scope
     * @param className the class name
     * @return the class or object prototype
     */
    public static Scriptable getClassOrObjectProto(Scriptable scope, String className) {
        Scriptable proto = ScriptableObject.getClassPrototype(scope, className);
        if (proto == null) {
            proto = ScriptableObject.getObjectPrototype(scope);
        }
        return proto;
    }

    /**
     * Make sure that number of arguments is valid.
     * @param args the argument array
     * @param min the minimum number of arguments
     * @param max the maximum number of arguments
     * @throws IllegalArgumentException if the number of arguments is not valid
     */
    public static void checkArguments(Object[] args, int min, int max) {
        if (min > -1 && args.length < min)
            throw new IllegalArgumentException();
        if (max > -1 && args.length > max)
            throw new IllegalArgumentException();
    }

    /**
     * Get an argument as ScriptableObject
     * @param args the argument array
     * @param pos the position of the requested argument
     * @return the argument as ScriptableObject
     * @throws IllegalArgumentException if the argument can't be converted to a map
     */
    public static ScriptableObject getScriptableArgument(Object[] args, int pos, boolean allowNull)
            throws IllegalArgumentException {
        if (pos >= args.length || args[pos] == null || args[pos] == Undefined.instance) {
            if (allowNull) return null;
            throw ScriptRuntime.constructError("Error", "Argument " + (pos + 1) + " must not be null");
        } if (args[pos] instanceof ScriptableObject) {
            return (ScriptableObject) args[pos];
        }
        throw ScriptRuntime.constructError("Error", "Can't convert to ScriptableObject: " + args[pos]);
    }

    /**
     * Get an argument as string
     * @param args the argument array
     * @param pos the position of the requested argument
     * @return the argument as string
     */
    public static String getStringArgument(Object[] args, int pos, boolean allowNull) {
        if (pos >= args.length || args[pos] == null || args[pos] == Undefined.instance) {
            if (allowNull) return null;
            throw ScriptRuntime.constructError("Error", "Argument " + (pos + 1) + " must not be null");
        }
        return ScriptRuntime.toString(args[pos].toString());
    }

    /**
     * Get an argument as Map
     * @param args the argument array
     * @param pos the position of the requested argument
     * @return the argument as map
     * @throws IllegalArgumentException if the argument can't be converted to a map
     */
    public static Map getMapArgument(Object[] args, int pos, boolean allowNull)
            throws IllegalArgumentException {
        if (pos >= args.length || args[pos] == null || args[pos] == Undefined.instance) {
            if (allowNull) return null;
            throw ScriptRuntime.constructError("Error", "Argument " + (pos + 1) + " must not be null");
        } if (args[pos] instanceof Map) {
            return (Map) args[pos];
        }
        throw ScriptRuntime.constructError("Error", "Can't convert to java.util.Map: " + args[pos]);
    }

    /**
     * Get an argument as object
     * @param args the argument array
     * @param pos the position of the requested argument
     * @return the argument as object
     */
    public static Object getObjectArgument(Object[] args, int pos, boolean allowNull) {
        if (pos >= args.length || args[pos] == null || args[pos] == Undefined.instance) {
            if (allowNull) return null;
            throw ScriptRuntime.constructError("Error", "Argument " + (pos + 1) + " must not be null");
        }
        return args[pos];
    }

    /**
     * Try to convert an object to an int value, returning the default value if conversion fails.
     * @param obj the value
     * @param defaultValue the default value
     * @return the converted value
     */
    public static int toInt(Object obj, int defaultValue) {
        double d = ScriptRuntime.toNumber(obj);
        if (d == ScriptRuntime.NaN || (int)d != d) {
            return defaultValue;
        }
        return (int) d;
    }


    /**
     * Get a snapshot of the current JavaScript evaluation state by creating
     * an Error object and invoke the function on it passing along any arguments.
     * Used to invoke console.trace() and friends because implementing this
     * in JavaScript would mess with the evaluation state.
     * @param function the function to call
     * @param args optional arguments to pass to the function.
     */
    public static void traceHelper(Function function, Object... args) {
        Context cx = Context.getCurrentContext();
        Scriptable scope = ScriptableObject.getTopLevelScope(function);
        EcmaError error = ScriptRuntime.constructError("Trace", "");
        WrapFactory wrapFactory = cx.getWrapFactory();
        Scriptable thisObj = wrapFactory.wrapAsJavaObject(cx, scope, error, null);
        for (int i = 0; i < args.length; i++) {
            args[i] = wrapFactory.wrap(cx, scope, args[i], null);
        }
        function.call(cx, scope, thisObj, args);
    }

    /**
     * Helper for console.assert(). Implemented in Java in order not to
     * modify the JavaScript stack.
     * @param condition the condition to test
     * @param args one or more message parts
     */
    public static void assertHelper(Object condition, Object... args) {
        if (ScriptRuntime.toBoolean(condition)) {
            return;
        }
        // assertion failed
        String msg = "";
        if (args.length > 0) {
            msg = ScriptRuntime.toString(args[0]);
            Pattern pattern = Pattern.compile("%[sdifo]");
            for (int i = 1; i < args.length; i++) {
                Matcher matcher = pattern.matcher(msg);
                if (matcher.find()) {
                    msg = matcher.replaceFirst(ScriptRuntime.toString(args[i]));
                } else {
                    msg = msg + " " + ScriptRuntime.toString(args[i]);
                }
            }
        }
        throw ScriptRuntime.constructError("AssertionError", msg);
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="170">
<file line="35" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\lang\JavaJessopScriptBuilder.java"/>
<file line="36" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\lang\JavascriptJessopScriptBuilder.java"/>
<codefragment>
<![CDATA[
	private static String escapeJavascript(String string) {
    	StringBuilder sb = new StringBuilder(string.length());
		for (int i = 0; i<string.length(); i++) {
			char ch = string.charAt(i);
			if (ch=='\n') {
			    sb.append("\\n");
			} else if (ch=='\\' || ch=='"' || ch=='\'' || ch<32 || ch>126) {
				String hex = Integer.toString(ch, 16);
				sb.append("\\u" + "0000".substring(0, 4-hex.length()) + hex);
			} else {
				sb.append(ch);
			}
		}
        return sb.toString();
    }
	
	@Override
	public void emitText(int line, String s) {
		skipToLine(line);
		s = suppressEol(s, declarations.isSuppressEol() && lastScriptletLine == line);
		print("out.write(\"" + escapeJavascript(s) + "\");");
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="111">
<file line="20" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\lang\LuaJessopScriptBuilder.java"/>
<file line="20" path="C:\Users\knoxg\workspace-4.15.0-sts-4.6.0-randomnoun\git\jessop\src\main\java\com\randomnoun\common\jessop\lang\RubyJessopScriptBuilder.java"/>
<codefragment>
<![CDATA[
	public RubyJessopScriptBuilder() {
	}
	private void skipToLine(int line) {
		while (outputLine < line) { print("\n"); }
	}
	private void print(String s) {
		// logger.info("** PRINT " + s);
		pw.print(s);
		for (int i=0; i<s.length(); i++) {
			if (s.charAt(i)=='\n') { outputLine++; } 
		}
	}
	private static String escapeLua(String string) {
		/* valid escapes ( https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#Strings )
\a	bell
\b	back space
\f	form feed
\n	newline
\r	carriage return
\t	horizontal tab
\v	vertical tab
\e	escape
\\	backslash
\"	double quote
		 */
		
    	StringBuilder sb = new StringBuilder(string.length());
    	String escapeChars = "\u0007" + "\u0008" + "\u000f" + "\n" + "\r" + "\u0009" + "\u000b" + "\u001b" + "\\" + "\"";
]]>
</codefragment>
</duplication>
</pmd-cpd>